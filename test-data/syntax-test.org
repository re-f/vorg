#+TITLE: VOrg 语法高亮完全测试套件
#+AUTHOR: VOrg 测试团队
#+DATE: 2024-01-01
#+LANGUAGE: zh-CN
#+OPTIONS: toc:2 num:t
#+STARTUP: overview
#+TAGS: work(w) home(h) project(p) urgent(u) testing(t)
#+FILETAGS: testing syntax highlighting vscode

* 📋 测试概览

这个文件全面测试VOrg扩展的语法高亮功能，包括：
- 🎯 所有TODO状态（TODO、DONE、NEXT、WAITING、CANCELLED）
- 📝 文本格式化（粗体、斜体、下划线、删除线、代码、等宽）
- 📅 时间戳和日期格式
- 🏷️ 标签和属性
- 💻 代码块语法高亮
- 📊 表格和列表
- 🔗 各种链接格式
- 📐 数学公式
- 💬 注释和分隔线

* 🎯 TODO状态完整测试

** TODO 标准待办任务 :urgent:work:
:PROPERTIES:
:ID: TODO-SYNTAX-TEST-1111-2222-3333-444444
:CREATED: [2024-01-01 Mon 09:00]
:PRIORITY: A
:CATEGORY: development
:END:

这是一个TODO状态的任务，应该高亮显示TODO关键词。

** NEXT 下一步任务 :active:project:
:PROPERTIES:
:ID: NEXT-SYNTAX-TEST-5555-6666-7777-888888
:SCHEDULED: <2024-01-02 Tue 10:00>
:END:

NEXT状态表示这是下一步要执行的任务。

** WAITING 等待任务 :blocked:
:PROPERTIES:
:ID: WAIT-SYNTAX-TEST-9999-AAAA-BBBB-CCCCCC
:WAITING_FOR: 外部审批
:END:

WAITING状态表示任务在等待某些条件。

** CANCELLED 已取消任务 :cancelled:
:PROPERTIES:
:ID: CANCEL-SYNTAX-TEST-DDDD-EEEE-FFFF-000000
:CANCELLED: [2024-01-01 Mon 16:00]
:REASON: 需求变更
:END:

CANCELLED状态表示任务已被取消。

** DONE 已完成任务 :completed:
:PROPERTIES:
:ID: DONE-SYNTAX-TEST-1234-5678-9ABC-DEFDEF
:COMPLETED: [2024-01-01 Mon 15:30]
:CLOCK: [2024-01-01 Mon 13:30]--[2024-01-01 Mon 15:30] =>  2:00
:END:

DONE状态表示任务已经完成，包含时间追踪。

* 📝 文本格式化完整测试

** 基本文本格式
这段文本展示了所有支持的格式化选项：

- *粗体文本* - 用于强调重要内容
- /斜体文本/ - 用于强调或引用
- _下划线文本_ - 突出显示特定内容
- +删除线文本+ - 表示已删除或过时的内容
- =行内代码= - 用于显示代码片段或命令
- ~等宽字体~ - 用于显示等宽内容

** 组合格式测试
- *粗体和/粗体斜体/* 组合
- =代码中的~等宽字体~= 组合
- _下划线和*粗体下划线*_ 组合

** 转义字符测试
- 字面星号：\*不是粗体\*
- 字面斜杠：\/不是斜体\/
- 字面等号：\=不是代码\=

* 📅 时间戳和日期格式测试

** 基本时间戳
- 活动时间戳：<2024-01-01 Mon>
- 活动时间戳带时间：<2024-01-01 Mon 10:30>
- 非活动时间戳：[2024-01-01 Mon]
- 非活动时间戳带时间：[2024-01-01 Mon 14:45]

** 时间范围
- 单日时间范围：<2024-01-01 Mon 09:00-17:00>
- 跨日期范围：<2024-01-01 Mon>--<2024-01-03 Wed>

** 重复时间戳
- 每日重复：<2024-01-01 Mon +1d>
- 每周重复：<2024-01-01 Mon +1w>
- 每月重复：<2024-01-01 Mon +1m>
- 每年重复：<2024-01-01 Mon +1y>

** 计划和截止时间
- SCHEDULED: <2024-01-02 Tue 09:00>
- DEADLINE: <2024-01-05 Fri 17:00>
- CLOSED: [2024-01-01 Mon 16:30]

** 时钟记录
CLOCK: [2024-01-01 Mon 09:00]--[2024-01-01 Mon 12:00] =>  3:00
CLOCK: [2024-01-01 Mon 13:00]--[2024-01-01 Mon 17:00] =>  4:00

* 🏷️ 标签和属性测试

** 标题标签测试
*** 单个标签 :work:
*** 多个标签 :work:project:urgent:
*** 长标签名 :long_tag_name:
*** 特殊字符标签 :tag-with-dash:tag_with_underscore:

** 属性块测试
*** 完整属性示例
:PROPERTIES:
:ID: FULL-PROPS-EXAMPLE-1234-5678-ABCD-EFGH
:CREATED: [2024-01-01 Mon 10:00]
:CATEGORY: testing
:PRIORITY: A
:EFFORT: 2:00
:TAGS: important development
:CUSTOM_PROP: 自定义值
:END:

这个标题包含了完整的属性信息。

** 全局属性设置
#+PROPERTY: EFFORT_ALL 0:30 1:00 2:00 4:00 8:00
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS %EFFORT

* 💻 代码块语法高亮测试

** Python 代码块
#+BEGIN_SRC python :results output :exports both
def fibonacci(n):
    """计算斐波那契数列的第n项"""
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

class Calculator:
    def __init__(self):
        self.history = []
    
    def add(self, x, y):
        result = x + y
        self.history.append(f"{x} + {y} = {result}")
        return result

# 使用示例
calc = Calculator()
result = calc.add(10, 20)
print(f"计算结果: {result}")

# 生成斐波那契数列
fib_sequence = [fibonacci(i) for i in range(10)]
print(f"斐波那契数列: {fib_sequence}")
#+END_SRC

** JavaScript/TypeScript 代码块  
#+BEGIN_SRC typescript :session :exports both
interface User {
    id: number;
    name: string;
    email?: string;
    tags: string[];
}

class UserManager {
    private users: User[] = [];
    
    addUser(user: User): void {
        this.users.push(user);
    }
    
    findUserById(id: number): User | undefined {
        return this.users.find(user => user.id === id);
    }
    
    getUsersByTag(tag: string): User[] {
        return this.users.filter(user => 
            user.tags.includes(tag)
        );
    }
}

// 使用示例
const userManager = new UserManager();
userManager.addUser({
    id: 1,
    name: "张三",
    email: "zhangsan@example.com",
    tags: ["developer", "frontend"]
});

// 异步函数示例
async function fetchUserData(userId: number): Promise<User | null> {
    try {
        const response = await fetch(`/api/users/${userId}`);
        return await response.json();
    } catch (error) {
        console.error('获取用户数据失败:', error);
        return null;
    }
}
#+END_SRC

** 其他编程语言代码块
#+BEGIN_SRC java
public class HelloWorld {
    private static final String GREETING = "Hello, World!";
    
    public static void main(String[] args) {
        System.out.println(GREETING);
        
        // Lambda 表达式示例
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
        names.stream()
             .filter(name -> name.length() > 3)
             .forEach(System.out::println);
    }
}
#+END_SRC

#+BEGIN_SRC cpp
#include <iostream>
#include <vector>
#include <memory>

class Shape {
public:
    virtual ~Shape() = default;
    virtual double area() const = 0;
    virtual void draw() const = 0;
};

class Circle : public Shape {
private:
    double radius;
    
public:
    Circle(double r) : radius(r) {}
    
    double area() const override {
        return 3.14159 * radius * radius;
    }
    
    void draw() const override {
        std::cout << "Drawing a circle with radius " << radius << std::endl;
    }
};

int main() {
    auto circle = std::make_unique<Circle>(5.0);
    std::cout << "Area: " << circle->area() << std::endl;
    circle->draw();
    return 0;
}
#+END_SRC

#+BEGIN_SRC rust
use std::collections::HashMap;

#[derive(Debug, Clone)]
struct Person {
    name: String,
    age: u32,
    email: Option<String>,
}

impl Person {
    fn new(name: String, age: u32) -> Self {
        Person {
            name,
            age,
            email: None,
        }
    }
    
    fn set_email(&mut self, email: String) {
        self.email = Some(email);
    }
    
    fn greet(&self) -> String {
        match &self.email {
            Some(email) => format!("Hi, I'm {} ({}) - {}", self.name, self.age, email),
            None => format!("Hi, I'm {} ({})", self.name, self.age),
        }
    }
}

fn main() {
    let mut person = Person::new("Alice".to_string(), 30);
    person.set_email("alice@example.com".to_string());
    
    println!("{}", person.greet());
    
    let mut scores: HashMap<String, i32> = HashMap::new();
    scores.insert("Alice".to_string(), 100);
    scores.insert("Bob".to_string(), 95);
    
    for (name, score) in &scores {
        println!("{}: {}", name, score);
    }
}
#+END_SRC

** Shell 脚本
#+BEGIN_SRC bash
#!/bin/bash

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 函数定义
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 系统信息检查
check_system() {
    log_info "检查系统信息..."
    
    OS=$(uname -s)
    ARCH=$(uname -m)
    
    echo "操作系统: $OS"
    echo "架构: $ARCH"
    
    if [[ "$OS" == "Linux" ]]; then
        if command -v lsb_release &> /dev/null; then
            DISTRO=$(lsb_release -si)
            VERSION=$(lsb_release -sr)
            log_info "发行版: $DISTRO $VERSION"
        fi
    fi
}

# 主函数
main() {
    log_info "开始系统检查脚本"
    check_system
    log_info "检查完成"
}

# 脚本入口
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
#+END_SRC

** 配置文件格式
#+BEGIN_SRC json
{
  "name": "vorg-extension",
  "version": "1.0.0",
  "description": "Org-mode support for VS Code",
  "main": "out/extension.js",
  "scripts": {
    "start": "node out/extension.js",
    "build": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "jest",
    "lint": "eslint src --ext ts"
  },
  "dependencies": {
    "unified": "^10.1.0",
    "uniorg-parse": "^1.0.0",
    "uniorg-rehype": "^1.0.0",
    "rehype-stringify": "^9.0.3"
  },
  "devDependencies": {
    "@types/vscode": "^1.60.0",
    "@types/node": "16.x",
    "typescript": "^4.7.4",
    "jest": "^29.0.0"
  },
  "engines": {
    "vscode": "^1.60.0"
  }
}
#+END_SRC

#+BEGIN_SRC yaml
# Docker Compose 配置
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://user:password@db:5432/appdb
      REDIS_URL: redis://redis:6379
    depends_on:
      - db
      - redis
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - node_modules:/app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  node_modules:

networks:
  default:
    name: app-network
#+END_SRC

** HTML 和 CSS
#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="VOrg 扩展示例页面">
    <title>VOrg 扩展 - Org-mode for VS Code</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
</head>
<body class="dark-theme">
    <header class="header">
        <nav class="navbar" role="navigation" aria-label="主导航">
            <div class="nav-brand">
                <img src="logo.svg" alt="VOrg Logo" class="logo">
                <h1>VOrg</h1>
            </div>
            <ul class="nav-menu">
                <li><a href="#features" class="nav-link">功能</a></li>
                <li><a href="#docs" class="nav-link">文档</a></li>
                <li><a href="#download" class="nav-link">下载</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="main-content">
        <section id="hero" class="hero-section">
            <h2>Org-mode for VS Code</h2>
            <p>强大的文档编辑与预览扩展</p>
            <button class="cta-button" onclick="downloadExtension()">
                立即安装
            </button>
        </section>
        
        <section id="features" class="features-section">
            <div class="feature-grid">
                <article class="feature-card">
                    <h3>实时预览</h3>
                    <p>编辑时自动更新预览内容</p>
                </article>
                <article class="feature-card">
                    <h3>语法高亮</h3>
                    <p>完整的 Org-mode 语法支持</p>
                </article>
            </div>
        </section>
    </main>
    
    <footer class="footer">
        <p>&copy; 2024 VOrg Extension. All rights reserved.</p>
    </footer>
    
    <script src="app.js" defer></script>
</body>
</html>
#+END_SRC

#+BEGIN_SRC css
/* CSS Reset and Base Styles */
:root {
    --primary-color: #667eea;
    --secondary-color: #764ba2;
    --accent-color: #f093fb;
    --text-color: #333333;
    --bg-color: #ffffff;
    --border-color: #e1e5e9;
    --shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    --border-radius: 8px;
    --transition: all 0.3s ease;
}

.dark-theme {
    --text-color: #ffffff;
    --bg-color: #1a1a1a;
    --border-color: #404040;
    --shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 
                 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
    transition: var(--transition);
}

/* Header Styles */
.header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 1rem 0;
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 100;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.nav-brand {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.logo {
    width: 40px;
    height: 40px;
    filter: brightness(0) invert(1);
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-link {
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    transition: var(--transition);
    position: relative;
}

.nav-link:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
}

.nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 50%;
    background-color: var(--accent-color);
    transition: var(--transition);
}

.nav-link:hover::after {
    width: 100%;
    left: 0;
}

/* Hero Section */
.hero-section {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
}

.hero-section h2 {
    font-size: 3rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.cta-button {
    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
    box-shadow: var(--shadow);
}

.cta-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
}

/* Feature Grid */
.features-section {
    padding: 4rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.feature-card {
    background: var(--bg-color);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 2rem;
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
}

/* Responsive Design */
@media (max-width: 768px) {
    .navbar {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav-menu {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .hero-section h2 {
        font-size: 2rem;
    }
    
    .feature-grid {
        grid-template-columns: 1fr;
    }
}

/* Animation Keyframes */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.fade-in-up {
    animation: fadeInUp 0.6s ease forwards;
}

/* Print Styles */
@media print {
    .header, .footer {
        display: none;
    }
    
    body {
        color: black;
        background: white;
    }
}
#+END_SRC

* 🔗 链接格式测试

** 内部链接
- 带描述的内部链接：[[id:TODO-SYNTAX-TEST-1111-2222-3333-444444][跳转到TODO任务]]
- 标题链接：[[*💻 代码块语法高亮测试][查看代码块测试]]
- 无描述内部链接：[[*📅 时间戳和日期格式测试]]

** 外部链接
- 带描述的HTTP链接：[[https://orgmode.org][Org-mode 官方网站]]
- 带描述的HTTPS链接：[[https://code.visualstudio.com][VS Code 官网]]
- GitHub链接：[[https://github.com/orgmode/org-mode][Org-mode GitHub仓库]]
- 无描述外部链接：[[https://www.gnu.org/software/emacs/]]

** 文件链接
- 相对路径文件：[[file:main.org][主测试文件]]
- 绝对路径文件：[[file:../README.md][项目说明]]
- 文件带行号：[[file:../src/extension.ts::25][扩展主文件第25行]]

** 特殊链接
- 邮件链接：[[mailto:admin@example.com][联系管理员]]
- 自定义协议：[[custom:my-protocol][自定义链接]]

** 裸链接
https://www.example.com
mailto:test@example.com
file:../package.json

* 📊 表格和列表测试

** 复杂表格
| 功能 | 状态 | 优先级 | 负责人 | 截止日期 | 进度 |
|------|------|--------|--------|----------|------|
| 实时预览 | DONE | 高 | 张三 | <2024-01-01 Mon> | 100% |
| 语法高亮 | DONE | 高 | 李四 | <2024-01-05 Fri> | 100% |
| 链接跳转 | DONE | 中 | 王五 | <2024-01-10 Wed> | 100% |
| 数学公式 | TODO | 低 | 赵六 | <2024-02-01 Thu> | 30% |
| 导出功能 | NEXT | 中 | 钱七 | <2024-01-20 Sat> | 0% |

** 嵌套列表
1. 第一级有序列表
   1. 第二级有序列表
      - 第三级无序列表
        - 第四级无序列表
          - [ ] 第五级任务列表
          - [X] 已完成的任务
          - [-] 进行中的任务
   2. 另一个第二级项目
      - 更多嵌套内容

** 复杂任务列表
- [ ] 项目A
  - [ ] 子任务A1 [0/3]
    - [ ] 详细步骤1
    - [ ] 详细步骤2  
    - [ ] 详细步骤3
  - [X] 子任务A2 [2/2]
    - [X] 详细步骤1
    - [X] 详细步骤2
  - [-] 子任务A3 [1/3]
    - [X] 详细步骤1
    - [ ] 详细步骤2
    - [ ] 详细步骤3

* 📐 数学公式测试

** 行内公式
这是一个行内公式：$E = mc^2$，这是另一个：$\sum_{i=1}^{n} x_i = \frac{n(n+1)}{2}$。

更复杂的行内公式：$\int_{-\infty}^{\infty} e^{-x^2} dx = \sqrt{\pi}$。

** 块级公式
$$
\begin{align}
\nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &= \frac{4\pi}{c}\vec{\mathbf{j}} \\
\nabla \cdot \vec{\mathbf{E}} &= 4 \pi \rho \\
\nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &= \vec{\mathbf{0}} \\
\nabla \cdot \vec{\mathbf{B}} &= 0
\end{align}
$$

矩阵和行列式：
$$
\begin{pmatrix}
a & b \\
c & d
\end{pmatrix}
\begin{pmatrix}
x \\
y
\end{pmatrix}
=
\begin{pmatrix}
ax + by \\
cx + dy
\end{pmatrix}
$$

** 数学符号测试
- 希腊字母：$\alpha, \beta, \gamma, \delta, \epsilon, \pi, \sigma, \omega$
- 数学运算：$\sum, \prod, \int, \oint, \partial, \nabla$
- 关系符号：$\leq, \geq, \neq, \approx, \equiv, \propto$
- 集合符号：$\in, \notin, \subset, \supset, \cup, \cap, \emptyset$

* 📦 特殊块类型测试

** 引用块
#+BEGIN_QUOTE
"代码就像幽默。当你必须解释它时，它就坏了。"
— Cory House

这是一个多行引用块的示例，
用于显示重要的引文或名言。
#+END_QUOTE

** 示例块
#+BEGIN_EXAMPLE
这是一个示例块
保持原始格式
不会被解释为 org-mode 语法

示例：
  - 这不会被当作列表
  * 这不会被当作标题
  [[link]] 这不会被当作链接
#+END_EXAMPLE

** 诗歌块
#+BEGIN_VERSE
春眠不觉晓，
处处闻啼鸟。
夜来风雨声，
花落知多少。
    — 孟浩然《春晓》
#+END_VERSE

** 居中块
#+BEGIN_CENTER
这段内容会居中显示
用于强调重要信息
或者标题文字
#+END_CENTER

** 导出块
#+BEGIN_EXPORT html
<div class="custom-html-block" style="background: #f0f8ff; padding: 1rem; border-left: 4px solid #4a90e2;">
  <h4>自定义HTML内容</h4>
  <p>这部分内容会作为原始HTML导出</p>
</div>
#+END_EXPORT

* 💬 注释和分隔线测试

# 这是单行注释，不会在导出时显示
# 可以用于添加说明或者临时禁用内容

#+BEGIN_COMMENT
这是多行注释块
可以包含多行内容
同样不会在导出时显示

TODO: 添加更多测试用例
FIXME: 修复某个已知问题
NOTE: 重要提醒信息
#+END_COMMENT

---

水平分隔线上方的内容

---

水平分隔线下方的内容

* 🎨 主题适配测试

** 明暗主题测试说明
这个部分用于测试VOrg扩展的主题适配功能：

1. 在VS Code中切换到浅色主题（如 Light+）
2. 观察预览窗口的颜色是否自动适配
3. 切换到深色主题（如 Dark+）
4. 再次观察预览窗口的颜色变化

** 预期效果
- 浅色主题：背景为白色，文字为深色
- 深色主题：背景为深色，文字为浅色
- 语法高亮颜色应该自动适配主题
- 链接颜色应该在两种主题下都清晰可见

---

*🎉 这个完整的语法测试文件涵盖了VOrg扩展支持的所有语法功能！* 