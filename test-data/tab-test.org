#+TITLE: TAB 键智能折叠测试
#+AUTHOR: VOrg Extension

* TAB 键功能测试

这个文档用于测试新的 TAB 键智能折叠功能，主要用于可见性控制。

** 标题折叠测试

将光标放在这个标题上，按 TAB 键应该切换折叠状态。

这是标题下的内容，应该可以被折叠。

*** 子标题
子标题的内容也应该可以被折叠。

** 列表折叠测试

### 有子项的列表（应该折叠）
- 主要话题 (光标在这里按 TAB 应该切换折叠状态)
  - 子话题 1
  - 子话题 2
    - 详细内容
  - 子话题 3

### 没有子项的列表（应该增加缩进）
- 独立项目 (光标在这里按 TAB 应该增加缩进)
- 另一个独立项目

### 任务列表测试
- [ ] 主要任务 (光标在这里按 TAB 应该切换折叠状态)
  - [ ] 子任务 1
  - [X] 子任务 2
  - [-] 子任务 3
- [ ] 独立任务 (光标在这里按 TAB 应该增加缩进)

### 缩进调整测试
  - 二级项目 (光标在这里按 Shift+TAB 应该减少缩进)
    - 三级项目
  - 另一个二级项目

** 表格导航测试

在表格中按 TAB 应该在单元格之间移动：

| 列1 | 列2 | 列3 |
|-----|-----|-----|
| A   | B   | C   |
| D   | E   | F   |
| G   | H   | I   |

测试步骤：
1. 将光标放在单元格 A 中
2. 按 TAB 键，光标应该移动到 B
3. 继续按 TAB，光标应该依次移动到 C、D、E 等
4. 在任何单元格按 Shift+TAB，光标应该移动到前一个单元格

** 代码块测试

### 代码块标题折叠测试
在代码块标题上按 TAB 应该切换代码块的折叠状态：

#+BEGIN_SRC python          <- 光标在这里按 TAB 应该折叠/展开整个代码块
def test_function():
    print("Hello World")
    if True:
        print("Nested")
#+END_SRC

### 代码块内部缩进测试
在代码块内部，TAB 键应该执行正常的代码缩进：

#+BEGIN_SRC python
def test_function():
    # 光标在这里按 TAB 应该正常缩进
    print("Hello World")
    if True:
        # 再次缩进
        print("Nested")
#+END_SRC

#+BEGIN_SRC javascript
function hello() {
    // JavaScript 代码缩进
    console.log("Hello");
    if (true) {
        // 嵌套缩进
        console.log("Nested");
    }
}
#+END_SRC

** 使用说明

### 测试步骤

1. **标题折叠测试**：
   - 将光标放在任何标题行上
   - 按 TAB 键
   - 观察标题内容是否被折叠/展开

2. **列表智能处理测试**：
   - 将光标放在有子项的列表项上，按 TAB 应该切换折叠状态
   - 将光标放在无子项的列表项上，按 TAB 应该增加缩进
   - 按 Shift+TAB 减少缩进

3. **代码块折叠测试**：
   - 将光标放在 #+BEGIN_SRC 行上，按 TAB 应该折叠/展开代码块
   - 在代码块内部按 TAB，应该执行正常的代码缩进

4. **表格导航测试**：
   - 将光标放在表格单元格中
   - 按 TAB 键在单元格间移动
   - 按 Shift+TAB 反向移动

### 预期行为

- 每种上下文中的 TAB 行为都应该符合 Emacs org-mode 的行为
- 非 org 文件中不应该影响原有的 TAB 功能
- 无法识别上下文时应该回退到默认 TAB 行为

* 测试结果记录

在这里记录测试结果和发现的问题。 